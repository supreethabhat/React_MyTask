{"version":3,"sources":["redux/keys.js","assets/Supreetha.png","assets/close-outline.svg","assets/pen-solid.svg","assets/trash-solid.svg","assets/search-solid.svg","styles/colors.js","components/card.js","styles/theme.js","config/locales.properties.js","screens/Login/LoginView.js","redux/actions/login.action.js","screens/Login/index.js","App.js","components/stickyHeader.js","screens/TaskList/components/listComponent.js","screens/TaskList/components/checkBoxList.js","screens/TaskList/TaskList.js","redux/actions/dashboard.actions.js","redux/actions/tasks.action.js","services/persistService.js","components/popUp.js","screens/TaskList/index.js","serviceWorker.js","redux/reducer/dashboard.reducer.js","redux/reducer/login.reducer.js","redux/reducer/task.reducer.js","redux/reducer/index.js","config/envConfig.js","services/fetcher.js","services/apiServices.js","redux/saga/login.saga.js","redux/saga/dashboard.saga.js","redux/saga/task.saga.js","redux/saga/index.js","redux/store/index.js","index.js"],"names":["keyMirror","keys","mirror","Object","forEach","v","FETCH_LOGIN","SET_LOGIN","LOGIN_FAIL","LOG_OUT","FETCH_DASHBOARD_DET","SET_DASHBOARD_DET","SET_DASHBOARD_ERROR","FETCH_TASKS","UPDATE_TASKS","DELETE_TASKS","SET_TASKS","SET_ERROR_TASK","CREATE_TASKS","FILTER_TASK","SET_FILTER_DATA","module","exports","Style","card","padding","overflow","backgroundColor","Colors","borderRadius","opacity","boxShadow","container","display","justifyContent","alignItems","height","React","memo","props","className","style","children","heading","color","fontSize","theme","fontWeight","text","border","width","paddingLeft","paddingRight","paddingTop","paddingBottom","button","disabledButton","useState","id","setId","name","setName","handleIdChange","useCallback","event","target","value","handleNameChange","handleLogin","Locales","flex","type","placeholder","onChange","required","disabled","trim","onClick","require","default","fetchLogin","data","setLogin","withRouter","connect","state","login","error","dispatch","actions","bindActionCreators","history","push","App","sticky","position","top","avatar","verticalAlign","marginLeft","nameStyle","float","textStyle","headerTitle","marginRight","src","alt","logOut","listText","strikeListText","textDecoration","listItems","taskItems","map","item","completed","key","_id","strikeThrough","check","setCheck","edit","setEdit","toggleCheckboxChange","console","log","checked","handleEdit","handleDelete","handleTaskDelete","defaultValue","label","autoFocus","complete","marginTop","mainContainer","marginBottom","innerContainer","textAlign","margin","numberStyle","valueStyle","searchBar","noTask","handleSearch","userName","latestTasks","length","tasksCompleted","totalTasks","handlePopUp","handleCheckboxChange","handleTaskEdit","fetchDashboardDetail","setDashboardDetail","fetchTasks","setTasks","createTasks","setErrorTask","updateTask","deleteTask","filterTask","searchValue","setFilterData","Session","localStorage","getItem","JSON","parse","session","setItem","stringify","removeItem","newText","newTask","flexDirection","task","setTask","handleTaskChange","handleTaskCreate","closePopup","loginData","dashboard","taskList","filteredTask","popup","setPopup","useEffect","msg","handleCheckBoxToggle","flag","obj","handleClosePopUp","taskValue","SessionService","removeSession","goBack","token","Boolean","window","location","hostname","match","initialState","tasks","appReducer","combineReducers","action","Fetcher","methodType","servicePath","payload","requestURL","EnvConfig","headers","this","getRequestHeaders","axiosResponse","getSessionDetails","Authorization","axios","Axios","create","baseURL","request","method","response","status","Error","Accept","TaskServices","apiKey","call","taskId","URL","replace","watchLogin","takeLatest","TaskService","Login","saveSessionDetails","put","message","watchTaskDetails","fetchDashboardData","getDashboardData","watchTaskList","updateTasks","deleteTasks","filterData","getTasks","select","taskData","filter","includes","root","all","fork","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","run","rootSaga","routing","exact","path","component","Task","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5a15064c.chunk.js","sourcesContent":["export default keyMirror({\n    //login\n    FETCH_LOGIN: null,\n    SET_LOGIN: null,\n    LOGIN_FAIL: null,\n    LOG_OUT : null,\n    //Dashboard\n    FETCH_DASHBOARD_DET: null,\n    SET_DASHBOARD_DET: null,\n    SET_DASHBOARD_ERROR: null,\n    //Tasks\n    FETCH_TASKS: null,\n    UPDATE_TASKS: null,\n    DELETE_TASKS: null,\n    SET_TASKS: null,\n    SET_ERROR_TASK: null,\n    CREATE_TASKS : null,\n    FILTER_TASK : null,\n    SET_FILTER_DATA : null\n});\n\n/**\n * This will mirror the keys and the values of the keys will be same as the key name\n * @param {*} keys\n */\nfunction keyMirror(keys) {\n    const mirror = {};\n    Object.keys(keys).forEach(v => {\n        mirror[v] = v;\n    });\n    return mirror;\n}\n","module.exports = __webpack_public_path__ + \"static/media/Supreetha.251a0c3d.png\";","module.exports = __webpack_public_path__ + \"static/media/close-outline.6e24e3b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/pen-solid.806db2c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/trash-solid.bda62654.svg\";","module.exports = __webpack_public_path__ + \"static/media/search-solid.2cbc2c36.svg\";","export default {\n    white: '#ffffff',\n    black: '#333333',\n    borderColor: '#e3e3e3',\n    shadow: 'rgba(0,0,0, .2)',\n    textColor: '#537178',\n    loginText: '#7A7D7E',\n    backgroundColor: '#EEF1F8',\n    buttonColor: '#5285EC',\n    textName: '#6D8187',\n    backgroundPageColor: '#F4F4F6',\n    greyColor: '#8F9EA2',\n    serachColor: '#D9DFEB',\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Colors from '../styles/colors';\n\nfunction Card(props) {\n    return (\n        <div className=\"row\" style={Style.container}>\n            <div style={Style.card}>\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\nconst Style = {\n    card: {\n        padding: 20,\n        overflow: 'hidden',\n        backgroundColor: Colors.white,\n        borderRadius: '12px',\n        opacity: '1',\n        boxShadow: '0px 3px 6px #00000029',\n    },\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n    },\n};\n\nCard.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport default React.memo(Card);\n","\nexport default {\n    FONT_SIZE_XSMALL: 10,\n    FONT_SIZE_SMALL: 12,\n    FONT_SIZE_MEDIUM: 14,\n    FONT_SIZE_LARGE: 16,\n    FONT_SIZE_XLARGE: 18,\n    FONT_SIZE_XXLARGE: 20,\n    FONT_SIZE_XXXLARGE: 24,\n    FONT_SIZE_XXXXLARGE: 32,\n    FONT_SIZE_VLARGE: 64,\n    FONT_WEIGHT_LIGHT: '200',\n    FONT_WEIGHT_MEDIUM: '500',\n    FONT_WEIGHT_HEAVY: '800',\n    WIDTH: 200,\n    DEVICE_SPACE: 130,\n    IMAGE_WIDTH: 20,\n    IMAGE_HEIGHT: 20,\n    MARGIN_HOR: -10,\n    RADIO_WIDTH: 16,\n    SMALL_WIDTH: 6.4,\n    MAX_WIDTH: 267,\n    ICON_SIZE: 120,\n};\n","export default {\nid:\"Id\",\nname : 'Name',\nlogin : 'Login',\ntasksCompleted : 'Tasks Completed',\nlogout : 'Logout',\nlatestCreatedTask : 'Latest Created Tasks',\ntasks : 'Tasks',\nnewTask : 'New Task',\nsearch : 'Search by task name',\ncompletedTasks : 'Completed Tasks',\ngenericErrorMessage : 'Error Occured',\ntaskName : 'Task Name',\nnoTasks : 'You have no task'\n};\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../../components/card';\nimport theme from '../../styles/theme';\nimport Colors from '../../styles/colors';\nimport Locales from '../../config/locales.properties';\n\nfunction Login(props) {\n    const [id, setId] = useState('');\n    const [name, setName] = useState('');\n    const handleIdChange = useCallback(event => {\n        setId(event.target.value);\n    }, []);\n    const handleNameChange = useCallback(event => {\n        setName(event.target.value);\n    }, []);\n    const handleLogin = useCallback(() => {\n        props.handleLogin(id, name);\n    }, [id, name]);\n    return (\n        <Card>\n            <div>\n                <p style={Style.heading}>{Locales.login}</p>\n                <form style={{ flex: 1 }}>\n                    <div className=\"row\" style={Style.padding}>\n                        <input\n                            type=\"text\"\n                            placeholder={Locales.id}\n                            style={Style.text}\n                            onChange={handleIdChange}\n                            required\n                        />\n                    </div>\n                    <div className=\"row\" style={Style.padding}>\n                        <input\n                            type=\"text\"\n                            placeholder={Locales.name}\n                            style={Style.text}\n                            onChange={handleNameChange}\n                            required\n                        />\n                    </div>\n                    <button\n                        disabled={name.trim() === ''}\n                        type=\"submit\"\n                        style={\n                            name.trim() === ''\n                                ? Style.disabledButton\n                                : Style.button\n                        }\n                        onClick={handleLogin}\n                    >\n                        {Locales.login}\n                    </button>\n                </form>\n            </div>\n        </Card>\n    );\n}\n\nconst Style = {\n    heading: {\n        color: Colors.textColor,\n        fontSize: theme.FONT_SIZE_XXLARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    text: {\n        color: Colors.loginText,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n        borderRadius: '8px',\n        backgroundColor: Colors.backgroundColor,\n        padding: 10,\n        opacity: '1',\n        border: 0,\n        width: '100%',\n    },\n    padding: {\n        paddingLeft: 8,\n        paddingRight: 18,\n        paddingTop: 8,\n        paddingBottom: 8,\n    },\n    button: {\n        backgroundColor: Colors.buttonColor,\n        color: Colors.white,\n        borderRadius: '8px',\n        border: 0,\n        opacity: 1,\n        width: '100%',\n        padding: 8,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    disabledButton: {\n        backgroundColor: Colors.greyColor,\n        color: Colors.white,\n        borderRadius: '8px',\n        border: 0,\n        opacity: 1,\n        width: '100%',\n        padding: 8,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n};\n\nLogin.propTypes = {\n    handleLogin: PropTypes.func.isRequired,\n};\n\nexport default React.memo(Login);\n","const {\n    FETCH_LOGIN,\n    SET_LOGIN,\n    LOGIN_FAIL,\n    LOG_OUT,\n} = require('../keys').default;\n\nexport function fetchLogin(data) {\n    return {\n        type: FETCH_LOGIN,\n        data,\n    };\n}\n\nexport function setLogin(data) {\n    return {\n        type: SET_LOGIN,\n        data,\n    };\n}\n\nexport function loginFail(error) {\n    return {\n        type: LOGIN_FAIL,\n        error,\n    };\n}\nexport function logOut() {\n    return {\n        type: LOG_OUT,\n    };\n}\n","import React, {  useCallback } from 'react';\nimport Login from './LoginView';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchLogin } from '../../redux/actions/login.action';\nimport { withRouter } from 'react-router-dom';\nfunction LoginContainer(props) {\n    const handleLogin = useCallback((id,name) => {\n        props.actions.fetchLogin(name);\n        props.history.push('/tasks');\n    }, [props.actions,props.history]);\n\n    return <Login handleLogin={handleLogin}></Login>;\n}\nfunction mapStateToProps(state) {\n    return {\n        data: state.login.data,\n        error: state.login.error,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(\n            {\n                fetchLogin,\n            },\n            dispatch,\n        ),\n    };\n}\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(LoginContainer));\n","import React from 'react';\nimport Login from '../src/screens/Login';\n\nfunction App() {\n    return <Login></Login>;\n}\n\nexport default App;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Colors from '../styles/colors';\nimport theme from '../styles/theme';\n\nfunction StickyHeader(props) {\n    return (\n        <div style={Style.sticky}>\n            <div style={Style.nameStyle}>\n                <img\n                    src={require('../assets/Supreetha.png')}\n                    alt=\"Avatar\"\n                    style={Style.avatar}\n                ></img>\n                <p style={Style.textStyle}>{props.headerTitle}</p>\n            </div>\n            <p style={Style.headerTitle} onClick={props.logOut}>Logout</p>\n        </div>\n\n    );\n}\n\nconst Style = {\n    sticky: {\n        position: 'fixed',\n        top: 0,\n        width: '100%',\n        display: 'block',\n        padding: 10,\n        backgroundColor: Colors.white,\n        boxShadow: '0px 3px 6px #00000029',\n        opacity: '1',\n    },\n    avatar: {\n        verticalAlign: 'middle',\n        width: '50px',\n        height: '50px',\n        borderRadius: '50%',\n        marginLeft: '20px',\n    },\n    nameStyle: {\n        float: 'left',\n        display: 'flex',\n    },\n    textStyle: {\n        marginLeft: 10,\n        color: Colors.textName,\n        fontSize: theme.FONT_SIZE_LARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    headerTitle: {\n        marginRight: 30,\n        float: 'right',\n        color: Colors.textName,\n        fontSize: theme.FONT_SIZE_LARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n};\n\nStickyHeader.propTypes = {\n    headerTitle: PropTypes.string.isRequired,\n    logOut : PropTypes.func.isRequired\n};\n\nexport default React.memo(StickyHeader);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport theme from '../../../styles/theme';\nimport Colors from '../../../styles/colors';\n\nfunction TaskListTemp(props) {\n    const items = props.taskItems;\n    const listItems = items.map(item => (\n        <li\n            style={item.completed ? Style.strikeListText : Style.listText}\n            key={item._id}\n        >\n            {item.name}\n        </li>\n    ));\n    return <ul>{listItems}</ul>;\n}\n\nconst Style = {\n    listText: {\n        color: Colors.greyColor,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    strikeListText: {\n        color: Colors.greyColor,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n        textDecoration: 'line-through',\n    },\n};\nTaskListTemp.propTypes = {\n    taskItems: PropTypes.array.isRequired,\n};\nexport default React.memo(TaskListTemp);\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './checkBoxList.css';\nfunction CheckBoxList(props) {\n    const [check, setCheck] = useState(false);\n    const [edit, setEdit] = useState(false);\n    const toggleCheckboxChange = useCallback(\n        event => {\n            console.log(event.target.checked);\n            setCheck(event.target.checked);\n            props.toggleCheckboxChange(\n                props.id,\n                event.target.value,\n                event.target.checked,\n            );\n        },\n        [props],\n    );\n    const handleEdit = useCallback(() => {\n        setEdit(true);\n    }, [props]);\n    const handleDelete = useCallback(() => {\n        props.handleTaskDelete(props.id);\n    }, [props]);\n\n    return (\n        <div className=\"padding\">\n            <div>\n                {edit ? (\n                    <input\n                        className=\"textLabel\"\n                        type=\"text\"\n                        defaultValue={props.label}\n                        onChange={toggleCheckboxChange}\n                        autoFocus\n                    ></input>\n                ) : (\n                    <div\n                        style={\n                            check || props.complete\n                                ? Style.strikeThrough\n                                : Style.padding\n                        }\n                        className=\"textLabel\"\n                    >\n                        <input\n                            className=\"checkbox\"\n                            type=\"checkbox\"\n                            checked={props.complete}\n                            value={props.label}\n                            onChange={toggleCheckboxChange}\n                        />\n\n                        {props.label}\n                    </div>\n                )}\n\n                <div style={{ float: 'right', marginTop: '7px' }}>\n                    {edit ? (\n                        <img\n                            src={require('../../../assets/close-outline.svg')}\n                            alt=\"close\"\n                            style={{\n                                marginRight: 10,\n                                width: '19px',\n                                height: '19px',\n                            }}\n                            onClick={() => setEdit(false)}\n                        />\n                    ) : (\n                        <img\n                            src={require('../../../assets/pen-solid.svg')}\n                            alt=\"edit\"\n                            style={{ marginRight: 10 }}\n                            onClick={handleEdit}\n                        />\n                    )}\n                    <img\n                        src={require('../../../assets/trash-solid.svg')}\n                        alt=\"delete\"\n                        style={{ marginRight: 10 }}\n                        onClick={handleDelete}\n                    />\n                </div>\n            </div>\n            <hr className=\"solid\"></hr>\n        </div>\n    );\n}\n\nconst Style = {\n    strikeThrough: {\n        padding: 10,\n        textDecoration: 'line-through',\n    },\n    padding: {\n        padding: 10,\n    },\n};\n\nCheckBoxList.propTypes = {\n    label: PropTypes.string.isRequired,\n    complete: PropTypes.bool.isRequired,\n    toggleCheckboxChange: PropTypes.func.isRequired,\n    handleTaskEdit: PropTypes.func.isRequired,\n    handleTaskDelete: PropTypes.func.isRequired,\n};\n\nexport default React.memo(CheckBoxList);\n","import PropTypes from 'prop-types';\nimport React, { useCallback } from 'react';\nimport Sticky from '../../components/stickyHeader';\nimport Colors from '../../styles/colors';\nimport Locales from '../../config/locales.properties';\nimport theme from '../../styles/theme';\nimport List from './components/listComponent';\nimport './TaskList.css';\nimport CheckBox from './components/checkBoxList';\nfunction TaskList(props) {\n    const handleSearch = useCallback(event => {\n        props.handleSearch(event.target.value);\n    }, []);\n    return (\n        <div style={Style.mainContainer}>\n            <Sticky headerTitle={props.userName} logOut={props.logOut}></Sticky>\n            {props.latestTasks.length > 0 ? (\n                <div>\n                    <div\n                        style={{ marginTop: '80px' }}\n                        className=\"container flex-direction\"\n                    >\n                        <div style={Style.container} className=\"div1\">\n                            <div>\n                                <p style={Style.innerContainer}>\n                                    {Locales.tasksCompleted}\n                                </p>\n                                <p style={Style.valueStyle}>\n                                    <span style={Style.numberStyle}>\n                                        {props.data.tasksCompleted}\n                                    </span>\n                                    /{props.data.totalTasks}\n                                </p>\n                            </div>\n                        </div>\n                        <div style={Style.container} className=\"div2\">\n                            <div>\n                                <p style={Style.innerContainer}>\n                                    {Locales.latestCreatedTask}\n                                </p>\n                                {props.latestTasks.length > 0 && (\n                                    <List\n                                        style={Style.listText}\n                                        taskItems={props.latestTasks}\n                                    />\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"container flex-direction\">\n                        <div style={Style.innerContainer} className=\"task\">\n                            {Locales.tasks}\n                        </div>\n                        <div className=\"taskCont\">\n                            <div className=\"searchDisplay\">\n                                <div\n                                    className=\"searchDiv\"\n                                    style={Style.searchBar}\n                                >\n                                    <img\n                                        src={require('../../assets/search-solid.svg')}\n                                        alt=\"search\"\n                                    />\n                                    <input\n                                        className=\"search\"\n                                        type=\"search\"\n                                        placeholder={Locales.search}\n                                        style={Style.text}\n                                        onChange={handleSearch}\n                                        required\n                                    />\n                                </div>\n                                <button\n                                    type=\"submit\"\n                                    style={Style.button}\n                                    onClick={props.handlePopUp}\n                                >\n                                    +{Locales.newTask}\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"taskListCont\" style={Style.container}>\n                        {props.latestTasks.map(item => (\n                            <CheckBox\n                                complete={item.completed}\n                                key={item._id}\n                                label={item.name}\n                                id={item._id}\n                                toggleCheckboxChange={\n                                    props.handleCheckboxChange\n                                }\n                                handleTaskDelete={props.handleTaskDelete}\n                                handleTaskEdit={props.handleTaskEdit}\n                            ></CheckBox>\n                        ))}\n                    </div>\n                </div>\n            ) : (\n                <div\n                    style={{ marginTop: '80px' }}\n                    className=\"container flex-direction\"\n                >\n                    <div style={Style.container} className=\"noTask\">\n                        <p style={Style.noTask}>{Locales.noTasks}</p>\n                        <button\n                            type=\"submit\"\n                            style={Style.button}\n                            onClick={props.handlePopUp}\n                        >\n                            +{Locales.newTask}\n                        </button>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nconst Style = {\n    mainContainer: {\n        backgroundColor: Colors.backgroundPageColor,\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n    },\n\n    container: {\n        overflow: 'hidden',\n        backgroundColor: Colors.white,\n        borderRadius: '12px',\n        opacity: '1',\n        boxShadow: '0px 3px 6px #00000029',\n        paddingTop: 8,\n        paddingBottom: '8px',\n        marginBottom: '10px',\n    },\n    innerContainer: {\n        marginLeft: '30px',\n        color: Colors.textColor,\n        textAlign: 'left',\n        fontSize: theme.FONT_SIZE_XXLARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    margin: {\n        marginLeft: '30px',\n    },\n    numberStyle: {\n        color: Colors.buttonColor,\n        fontSize: theme.FONT_SIZE_VLARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    valueStyle: {\n        marginLeft: '30px',\n        color: Colors.greyColor,\n        fontSize: theme.FONT_SIZE_XXLARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    button: {\n        backgroundColor: Colors.buttonColor,\n        color: Colors.white,\n        borderRadius: '8px',\n        border: 0,\n        opacity: 1,\n        width: '100%',\n        padding: 8,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    text: {\n        color: Colors.loginText,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n        paddingLeft: 10,\n        border: 0,\n    },\n    searchBar: {\n        display: 'flex',\n        borderRadius: '8px',\n        backgroundColor: Colors.serachColor,\n        padding: 10,\n        opacity: '1',\n        border: 0,\n    },\n    noTask: {\n        color: Colors.textColor,\n        textAlign: 'center',\n        fontSize: theme.FONT_SIZE_XXLARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n};\n\nTaskList.propTypes = {\n    userName: PropTypes.string.isRequired,\n    data: PropTypes.object,\n    latestTasks: PropTypes.array.isRequired,\n    handleCheckboxChange: PropTypes.func.isRequired,\n    handleTaskEdit: PropTypes.func.isRequired,\n    handleTaskDelete: PropTypes.func.isRequired,\n    handlePopUp: PropTypes.func.isRequired,\n    handleSearch: PropTypes.func,\n    logOut: PropTypes.func.isRequired,\n};\n\nexport default React.memo(TaskList);\n","const {\n    FETCH_DASHBOARD_DET,\n    SET_DASHBOARD_DET,\n    SET_DASHBOARD_ERROR,\n} = require('../keys').default;\n\nexport function fetchDashboardDetail() {\n    return {\n        type: FETCH_DASHBOARD_DET,\n    };\n}\n\nexport function setDashboardDetail(data) {\n           return {\n               type: SET_DASHBOARD_DET,\n               data,\n           };\n       }\n\nexport function setDashboardError(error) {\n    return {\n        type: SET_DASHBOARD_ERROR,\n        error,\n    };\n}\n","const {\n    FETCH_TASKS,\n    UPDATE_TASKS,\n    DELETE_TASKS,\n    SET_TASKS,\n    SET_ERROR_TASK,\n    CREATE_TASKS,\n    FILTER_TASK,\n    SET_FILTER_DATA,\n} = require('../keys').default;\n\nexport function fetchTasks() {\n    return {\n        type: FETCH_TASKS,\n    };\n}\n\nexport function setTasks(data) {\n    return {\n        type: SET_TASKS,\n        data,\n    };\n}\n\nexport function createTasks(data) {\n    return {\n        type: CREATE_TASKS,\n        data,\n    };\n}\n\nexport function setErrorTask(error) {\n    return {\n        type: SET_ERROR_TASK,\n        error,\n    };\n}\n\nexport function updateTask(id, data) {\n    return {\n        type: UPDATE_TASKS,\n        id,\n        data,\n    };\n}\n\nexport function deleteTask(data) {\n    return {\n        type: DELETE_TASKS,\n        data,\n    };\n}\nexport function filterTask(searchValue) {\n           return {\n               type: FILTER_TASK,\n               searchValue,\n           };\n       }\nexport function setFilterData(data) {\n    return {\n        type: SET_FILTER_DATA,\n        data,\n    };\n}\n","// import { AsyncStorage } from 'AsyncStorage';\n\nconst SESSION_KEY = 'KEY_SESSION_TOKENS';\n\nexport default class Session {\n    /**\n     * This will fetch session details from the Async storage.\n     */\n    static async getSessionDetails() {\n        try {\n\n            const data = await localStorage.getItem(SESSION_KEY);\n            if (data !== null) {\n                return JSON.parse(data);\n            }\n        } catch (e) {}\n        return null;\n    }\n\n    /**\n     * This will save session daa into the async storage.\n     * @param {*} session\n     */\n    static async saveSessionDetails(session) {\n        try {\n             await localStorage.setItem(SESSION_KEY, JSON.stringify(session));\n        } catch (e) {}\n    }\n\n    /**\n     * This will remove the session object from the persistent storage.\n     */\n    static async removeSession() {\n        try {\n          await localStorage.removeItem(SESSION_KEY);\n        } catch (e) {}\n    }\n}\n","import React, { useCallback, useState } from 'react';\nimport './style.css';\nimport PropTypes from 'prop-types';\nimport Colors from '../styles/colors';\nimport theme from '../styles/theme';\nimport Locales from '../config/locales.properties';\n\nfunction PopUp(props) {\n    const [task, setTask] = useState('');\n    const handleTaskChange = useCallback(\n        event => {\n            setTask(event.target.value);\n        },\n        [task],\n    );\n\n    const handleTaskCreate = useCallback(() => {\n        props.closePopup(task);\n    }, [task]);\n    return (\n        <div className=\"popup\">\n            <div className=\"popupinner\">\n                <p style={Style.newText}>+ {Locales.newTask}</p>\n                <div style={Style.newTask}>\n                    <input\n                        type=\"text\"\n                        placeholder={Locales.taskName}\n                        style={Style.text}\n                        onChange={handleTaskChange}\n                        required\n                    />\n                    <button\n                        type=\"submit\"\n                        style={Style.button}\n                        onClick={handleTaskCreate}\n                    >\n                        +{Locales.newTask}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nconst Style = {\n    button: {\n        backgroundColor: Colors.buttonColor,\n        color: Colors.white,\n        borderRadius: '8px',\n        border: 0,\n        opacity: 1,\n        width: 'auto',\n        padding: 8,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n        margin: 10,\n    },\n    text: {\n        color: Colors.loginText,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n        borderRadius: '8px',\n        backgroundColor: Colors.backgroundColor,\n        padding: 10,\n        opacity: '1',\n        border: 0,\n        margin: 10,\n        width: 'auto',\n    },\n    newText: {\n        color: Colors.textColor,\n        fontSize: theme.FONT_SIZE_XLARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n        textAlign: 'center',\n    },\n    newTask: {\n        display: 'grid',\n        textAlign: 'center',\n        flexDirection: 'row',\n    },\n};\n\nPopUp.propTypes = {\n    closePopup: PropTypes.func.isRequired,\n};\n\nexport default React.memo(PopUp);\n","import React, { useEffect, useCallback, useState } from 'react';\nimport TaskList from './TaskList';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { fetchDashboardDetail } from '../../redux/actions/dashboard.actions';\nimport {\n    updateTask,\n    deleteTask,\n    createTasks,\n    fetchTasks,\n    filterTask,\n} from '../../redux/actions/tasks.action';\nimport SessionService from '../../services/persistService';\nimport PopUp from '../../components/popUp';\n\nfunction TaskListContainer(props) {\n    const [popup, setPopup] = useState(false);\n    /**Load the Dashboard Data */\n    useEffect(() => {\n        if (\n            props.loginData &&\n            props.loginData.msg === 'User logged in successfully'\n        ) {\n            props.actions.fetchDashboardDetail();\n            props.actions.fetchTasks();\n        }\n    }, [props.loginData]);\n    /** On Check Box click action, update the list with the change */\n    const handleCheckBoxToggle = useCallback((id, value, flag) => {\n        let obj = {\n            name: value,\n            completed: flag,\n        };\n        props.actions.updateTask(id, obj);\n    }, []);\n    /** On Delete of task */\n    const handleTaskDelete = useCallback(value => {\n        props.actions.deleteTask(value);\n    }, []);\n    /** On Edit of Task */\n    const handleTaskEdit = useCallback(value => {\n        console.log(value);\n    }, []);\n    /** To open the pop up to create new task */\n    const handlePopUp = useCallback(() => {\n        setPopup(true);\n    }, []);\n    /**Close the pop up and update the task */\n    const handleClosePopUp = useCallback(taskValue => {\n        props.actions.createTasks(taskValue);\n        console.log(taskValue);\n        setPopup(false);\n    }, []);\n    /** Search through the tasks */\n    const handleSearch = useCallback(value => {\n        props.actions.filterTask(value);\n    }, []);\n    /** LogOut function */\n    const logOut = useCallback(() => {\n        SessionService.removeSession();\n        props.history.goBack();\n    }, []);\n\n    return (\n        <div>\n            {props.data ? (\n                <div>\n                    <TaskList\n                        userName={props.loginData && props.loginData.token.name}\n                        data={props.data}\n                        latestTasks={props.taskList ? props.taskList : []}\n                        handleCheckboxChange={handleCheckBoxToggle}\n                        handleTaskDelete={handleTaskDelete}\n                        handleTaskEdit={handleTaskEdit}\n                        handlePopUp={handlePopUp}\n                        handleSearch={handleSearch}\n                        logOut={logOut}\n                    />\n                    {popup && <PopUp closePopup={handleClosePopUp} />}\n                </div>\n            ) : (\n                <div className=\"loader\"></div>\n            )}\n        </div>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        loginData: state.login.data,\n        data: state.dashboard.data,\n        error: state.dashboard.error,\n        taskList: state.task.filteredTask,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(\n            {\n                fetchDashboardDetail,\n                createTasks,\n                deleteTask,\n                updateTask,\n                fetchTasks,\n                filterTask,\n            },\n            dispatch,\n        ),\n    };\n}\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(TaskListContainer),\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const {\n    FETCH_DASHBOARD_DET,\n    SET_DASHBOARD_DET,\n    SET_DASHBOARD_ERROR,\n} = require('../keys').default;\n\nexport const initialState = {\n    data: {},\n    error: null,\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_DASHBOARD_DET:\n            return {\n                ...state,\n            };\n        case SET_DASHBOARD_DET:\n            return {\n                ...state,\n                data: action.data,\n            };\n        case SET_DASHBOARD_ERROR:\n            return {\n                ...state,\n                error: action.error,\n            };\n        default:\n            return state;\n    }\n};\n","const {\n    FETCH_LOGIN,\n    SET_LOGIN,\n    LOGIN_FAIL,\n    LOG_OUT,\n} = require('../keys').default;\n\nexport const initialState = {\n    data: null,\n    error: null,\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_LOGIN:\n            return {\n                ...state,\n            };\n        case SET_LOGIN:\n            return {\n                ...state,\n                data: action.data,\n            };\n        case LOGIN_FAIL:\n            return {\n                ...state,\n                error: action.error,\n            };\n        case LOG_OUT:\n            return {\n                  ...initialState,\n\n            };\n        default:\n            return state;\n    }\n};\n","const {\n    FETCH_TASKS,\n    SET_TASKS,\n    SET_ERROR_TASK,\n    // FILTER_TASK,\n    SET_FILTER_DATA\n} = require('../keys').default;\n\nexport const initialState = {\n    tasks: {},\n    error: null,\n    filteredTask : []\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_TASKS:\n            return {\n                ...state,\n            };\n\n        case SET_TASKS:\n            return {\n                ...state,\n                tasks: action.data,\n                filteredTask: action.data.tasks,\n            };\n\n        case SET_ERROR_TASK:\n            return {\n                ...state,\n                error: action.error,\n            };\n        case SET_FILTER_DATA:\n            return {\n                ...state,\n                filteredTask: action.data,\n            };\n\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\nimport dashboard from './dashboard.reducer';\nimport login from './login.reducer';\nimport task from './task.reducer';\n\n// const { SET_LOGGED_IN } = require('../keys').default;\n\nconst appReducer = combineReducers({\n    dashboard,\n    login,\n    task,\n});\n\nexport default function root(state, action) {\n    // if (action.type === SET_LOGGED_IN) {\n    //     state = { login: state && state.login };\n    // }\n    return appReducer(state, action);\n}\n","/**\n\nthis file basically will be used to get the default base url and other things based on the build environment like production, staging etc.\n**/\n\nexport default {\n    hostURL: 'https://dev.teledirectasia.com:3092',\n};\n","/**\n * This is a network library class, and will be used to perform all the network related operations.\n *\n */\nimport Axios from 'axios';\nimport { EnvConfig, Locales } from '../config';\nimport SessionService from '../services/persistService';\n\nexport const GET = 'GET';\nexport const POST = 'POST';\nexport const PUT = 'PUT';\nexport const DELETE = 'DELETE';\n\nexport default class Fetcher {\n    /**\n     * This method will hit the web server.\n     *\n     * @param {string} methodType - GET/POST values.\n     * @param {string} servicePath - servicePath to be hit.\n     * @param {Object} payload - will be empty in case of GET request.\n     *\n     */\n    static async call(methodType, servicePath, payload) {\n        const requestURL = EnvConfig.hostURL + servicePath;\n        const headers = this.getRequestHeaders();\n\n        try {\n            let axiosResponse = null;\n            try {\n                const session = await SessionService.getSessionDetails();\n                if (session !== null) {\n                    headers.Authorization = `${session.token.token}`;\n                }\n                const axios = Axios.create({\n                    baseURL: requestURL,\n                    headers,\n                    data: payload,\n                });\n                axiosResponse = await axios.request({\n                    method: methodType,\n                    data: payload,\n                });\n            } catch (error) {\n                axiosResponse = error.response;\n            }\n\n            // The API call has been executed successfully. This will return the actual JSON response.\n\n            if (axiosResponse.status === 200 || axiosResponse.status === 201) {\n                return axiosResponse.data;\n            }\n            if (axiosResponse.status === 400) {\n                throw new Error(Locales.genericErrorMessage);\n            }\n        } catch (error) {\n            // There is an error in fetching the data. This will return the error message to the function caller.\n\n            throw new Error(Locales.genericErrorMessage);\n        }\n    }\n\n    /**\n     function will create the required headers to be passed in  all the web services.\n     @returns {Object} JSON-object with all headers details.\n   */\n    static getRequestHeaders() {\n        const headers = {\n            Accept: 'application/json',\n        };\n        headers['Content-Type'] = 'application/json';\n        return headers;\n    }\n}\n","import Fetcher, { DELETE, GET, POST, PUT } from './fetcher';\nconst LOGIN_URL = '/login';\nconst DASH_URL = '/dashboard';\nconst TASK_URL = '/tasks';\nconst UPDATE_TASKS = '/tasks/{taskID}';\nclass TaskServices {\n    /** Service to Login and get Authorization Key */\n    static async Login(name) {\n        const URL = LOGIN_URL;\n        const payload = {\n            name: name,\n            apiKey: '32bfee0c72840a0b', // have hardcoded or else, ID will be sent\n        };\n        return Fetcher.call(POST, `${URL}`, payload);\n    }\n    /** Service to get Dashboard data */\n    static async getDashboardData() {\n        const URL = DASH_URL;\n        return Fetcher.call(GET, `${URL}`);\n    }\n    /** Service to get list of tasks */\n    static async getTasks() {\n        const URL = TASK_URL;\n        return Fetcher.call(GET, `${URL}`);\n    }\n    /** Service to get update the task */\n    static async updateTasks(taskId, data) {\n        const URL = UPDATE_TASKS.replace('{taskID}', taskId);\n        return Fetcher.call(PUT, `${URL}`, data);\n    }\n    /** Service to get create the task */\n    static async createTasks(data) {\n        const URL = TASK_URL;\n        const payload = {\n            name: data.data,\n            completed: false,\n        };\n        return Fetcher.call(POST, `${URL}`, payload);\n    }\n\n    /** Service to get delete the task */\n    static async deleteTask(taskId) {\n        const URL = UPDATE_TASKS.replace('{taskID}', taskId);\n        return Fetcher.call(DELETE, `${URL}`);\n    }\n}\n\nexport default TaskServices;\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport TaskService from '../../services/apiServices';\nimport SessionService from '../../services/persistService';\nimport {\n    setLogin,\n    loginFail,\n} from '../actions/login.action';\n\nconst { FETCH_LOGIN } = require('../keys').default;\n\nexport function* watchLogin() {\n    yield takeLatest(FETCH_LOGIN, fetchLogin);\n}\n\nexport function* fetchLogin(name) {\n    try {\n        const data = yield call(TaskService.Login,name.data);\n        yield call(SessionService.saveSessionDetails, data);\n        yield put(setLogin(data));\n    } catch (error) {\n        yield put(loginFail(error.message));\n    }\n}\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport TaskService from '../../services/apiServices';\nimport {\n    setDashboardDetail,\n    setDashboardError,\n} from '../actions/dashboard.actions';\n\nconst { FETCH_DASHBOARD_DET } = require('../keys').default;\n\nexport function* watchTaskDetails() {\n    yield takeLatest(FETCH_DASHBOARD_DET, fetchDashboardData);\n}\n\nexport function* fetchDashboardData() {\n    try {\n        const data = yield call(\n            TaskService.getDashboardData,\n        );\n        yield put(setDashboardDetail(data));\n    } catch (error) {\n        yield put(setDashboardError(error.message));\n    }\n}\n","import { call, put, takeLatest, select } from 'redux-saga/effects';\nimport TaskService from '../../services/apiServices';\nimport { fetchDashboardData } from './dashboard.saga';\nimport { setTasks, setErrorTask, setFilterData } from '../actions/tasks.action';\n\nconst {\n    FETCH_TASKS,\n    UPDATE_TASKS,\n    DELETE_TASKS,\n    CREATE_TASKS,\n    FILTER_TASK,\n} = require('../keys').default;\n\nexport function* watchTaskList() {\n    yield takeLatest(FETCH_TASKS, fetchTasks);\n    yield takeLatest(CREATE_TASKS, createTasks);\n    yield takeLatest(UPDATE_TASKS, updateTasks);\n    yield takeLatest(DELETE_TASKS, deleteTasks);\n    yield takeLatest(FILTER_TASK, filterData);\n}\n\nexport function* fetchTasks() {\n    try {\n        const data = yield call(TaskService.getTasks);\n        yield put(setTasks(data));\n    } catch (error) {\n        yield put(setErrorTask(error.message));\n    }\n}\nexport function* createTasks(action) {\n    try {\n        yield call(TaskService.createTasks, action);\n        yield call(fetchTasks);\n        yield call(fetchDashboardData);\n    } catch (error) {\n        yield put(setErrorTask(error.message));\n    }\n}\nexport function* updateTasks(action) {\n    try {\n        yield call(TaskService.updateTasks, action.id, action.data);\n        yield call(fetchTasks);\n    } catch (error) {\n        yield put(setErrorTask(error.message));\n    }\n}\nexport function* deleteTasks(action) {\n    try {\n        yield call(TaskService.deleteTask, action.data);\n        yield call(fetchTasks);\n    } catch (error) {\n        yield put(setErrorTask(error.message));\n    }\n}\nexport function* filterData(action) {\n    const taskData = yield select(state => state.task.tasks);\n    const data = taskData.tasks.filter(item =>\n        item.name.includes(action.searchValue),\n    );\n    yield put(setFilterData(data));\n}\n","import { all, fork } from 'redux-saga/effects';\nimport { watchLogin } from './login.saga';\nimport { watchTaskDetails } from './dashboard.saga';\nimport {watchTaskList} from './task.saga';\n\nexport default function* root() {\n    yield all([fork(watchLogin), fork(watchTaskDetails),fork(watchTaskList)]);\n}\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from '../reducer';\nimport rootSaga from '../saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    rootReducer,\n    compose(applyMiddleware(sagaMiddleware)),\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Route,BrowserRouter as Router } from 'react-router-dom';\nimport Task from '../src/screens/TaskList';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from '../src/redux/store';\n\nconst routing = (\n    <Provider store={store}>\n        <Router>\n            <div>\n                <Route exact path=\"/React_MyTask\" component={App} />\n                <Route path=\"/React_MyTask/tasks\" component={Task} />\n            </div>\n        </Router>\n    </Provider>\n);\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}