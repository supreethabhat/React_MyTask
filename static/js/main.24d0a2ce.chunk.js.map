{"version":3,"sources":["redux/keys.js","assets/Supreetha.png","assets/pen-solid.svg","assets/trash-solid.svg","assets/search-solid.svg","styles/colors.js","components/card.js","styles/theme.js","config/locales.properties.js","screens/Login/LoginView.js","redux/actions/login.action.js","screens/Login/index.js","App.js","components/stickyHeader.js","screens/TaskList/components/listComponent.js","screens/TaskList/components/checkBoxList.js","screens/TaskList/TaskList.js","redux/actions/dashboard.actions.js","screens/TaskList/index.js","serviceWorker.js","redux/reducer/dashboard.reducer.js","redux/reducer/login.reducer.js","redux/reducer/index.js","config/envConfig.js","services/persistService.js","services/fetcher.js","services/apiServices.js","redux/saga/login.saga.js","redux/saga/dashboard.saga.js","redux/saga/index.js","redux/store/index.js","index.js"],"names":["keyMirror","keys","mirror","Object","forEach","v","FETCH_LOGIN","SET_LOGIN","LOGIN_FAIL","FETCH_DASHBOARD_DET","SET_DASHBOARD_DET","SET_DASHBOARD_ERROR","module","exports","Style","card","padding","overflow","backgroundColor","Colors","borderRadius","opacity","boxShadow","container","display","justifyContent","alignItems","height","React","memo","props","className","style","children","heading","color","fontSize","theme","fontWeight","text","border","width","paddingLeft","paddingRight","paddingTop","paddingBottom","button","useState","id","setId","name","setName","handleIdChange","useCallback","event","target","value","handleNameChange","handleLogin","Locales","flex","type","placeholder","onChange","required","onClick","require","default","fetchLogin","data","setLogin","withRouter","connect","state","login","error","dispatch","actions","bindActionCreators","history","push","App","sticky","position","top","avatar","verticalAlign","marginLeft","nameStyle","float","textStyle","headerTitle","marginRight","src","alt","listText","strikeListText","textDecoration","listItems","taskItems","map","item","completed","key","_id","toggleCheckboxChange","handleEdit","handleTaskEdit","handleDelete","handleTaskDelete","checked","isChecked","label","mainContainer","marginBottom","innerContainer","textAlign","margin","numberStyle","valueStyle","searchBar","userName","marginTop","tasksCompleted","totalTasks","latestTasks","handleCheckboxChange","fetchDashboardDetail","setDashboardDetail","dashboard","useEffect","handleCheckBoxToggle","console","log","Boolean","window","location","hostname","match","initialState","appReducer","combineReducers","action","Session","AsyncStorage","getItem","JSON","parse","session","setItem","stringify","removeItem","Fetcher","methodType","servicePath","payload","requestURL","EnvConfig","headers","this","getRequestHeaders","axiosResponse","SessionService","getSessionDetails","Authorization","token","axios","Axios","create","baseURL","request","method","response","status","Error","Accept","TaskServices","apiKey","call","taskId","URL","replace","watchLogin","takeLatest","TaskService","Login","saveSessionDetails","put","message","watchTaskDetails","fetchDashboardData","getDashboardData","root","all","fork","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","run","rootSaga","routing","exact","path","component","Task","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.24d0a2ce.chunk.js","sourcesContent":["export default keyMirror({\n    //login\n    FETCH_LOGIN: null,\n    SET_LOGIN: null,\n    LOGIN_FAIL: null,\n    //Dashboard\n    FETCH_DASHBOARD_DET: null,\n    SET_DASHBOARD_DET: null,\n    SET_DASHBOARD_ERROR: null,\n});\n\n/**\n * This will mirror the keys and the values of the keys will be same as the key name\n * @param {*} keys\n */\nfunction keyMirror(keys) {\n    const mirror = {};\n    Object.keys(keys).forEach(v => {\n        mirror[v] = v;\n    });\n    return mirror;\n}\n","module.exports = __webpack_public_path__ + \"static/media/Supreetha.251a0c3d.png\";","module.exports = __webpack_public_path__ + \"static/media/pen-solid.806db2c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/trash-solid.bda62654.svg\";","module.exports = __webpack_public_path__ + \"static/media/search-solid.2cbc2c36.svg\";","export default {\n    white: '#ffffff',\n    black: '#333333',\n    borderColor: '#e3e3e3',\n    shadow: 'rgba(0,0,0, .2)',\n    textColor: '#537178',\n    loginText: '#7A7D7E',\n    backgroundColor: '#EEF1F8',\n    buttonColor: '#5285EC',\n    textName: '#6D8187',\n    backgroundPageColor: '#F4F4F6',\n    greyColor: '#8F9EA2',\n    serachColor: '#D9DFEB',\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Colors from '../styles/colors';\n\nfunction Card(props) {\n    return (\n        <div className=\"row\" style={Style.container}>\n            <div style={Style.card}>\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\nconst Style = {\n    card: {\n        padding: 20,\n        overflow: 'hidden',\n        backgroundColor: Colors.white,\n        borderRadius: '12px',\n        opacity: '1',\n        boxShadow: '0px 3px 6px #00000029',\n    },\n    container: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n    },\n};\n\nCard.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport default React.memo(Card);\n","\nexport default {\n    FONT_SIZE_XSMALL: 10,\n    FONT_SIZE_SMALL: 12,\n    FONT_SIZE_MEDIUM: 14,\n    FONT_SIZE_LARGE: 16,\n    FONT_SIZE_XLARGE: 18,\n    FONT_SIZE_XXLARGE: 20,\n    FONT_SIZE_XXXLARGE: 24,\n    FONT_SIZE_XXXXLARGE: 32,\n    FONT_SIZE_VLARGE: 64,\n    FONT_WEIGHT_LIGHT: '200',\n    FONT_WEIGHT_MEDIUM: '500',\n    FONT_WEIGHT_HEAVY: '800',\n    WIDTH: 200,\n    DEVICE_SPACE: 130,\n    IMAGE_WIDTH: 20,\n    IMAGE_HEIGHT: 20,\n    MARGIN_HOR: -10,\n    RADIO_WIDTH: 16,\n    SMALL_WIDTH: 6.4,\n    MAX_WIDTH: 267,\n    ICON_SIZE: 120,\n};\n","export default {\nid:\"Id\",\nname : 'Name',\nlogin : 'Login',\ntasksCompleted : 'Tasks Completed',\nlogout : 'Logout',\nlatestCreatedTask : 'Latest Created Tasks',\ntasks : 'Tasks',\nnewTask : 'New Task',\nsearch : 'Search by task name',\ncompletedTasks : 'Completed Tasks',\ngenericErrorMessage : 'Error Occured',\n};\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../../components/card';\nimport theme from '../../styles/theme';\nimport Colors from '../../styles/colors';\nimport Locales from '../../config/locales.properties';\n\nfunction Login(props) {\n    const [id, setId] = useState('');\n    const [name, setName] = useState('');\n    const handleIdChange = useCallback(event => {\n        setId(event.target.value);\n    }, []);\n    const handleNameChange = useCallback(event => {\n        setName(event.target.value);\n    }, []);\n    const handleLogin = useCallback(() => {\n        props.handleLogin(id, name);\n    }, [id, name]);\n    return (\n        <Card>\n            <div>\n                <p style={Style.heading}>{Locales.login}</p>\n                <form style={{ flex: 1 }}>\n                    <div className=\"row\" style={Style.padding}>\n                        <input\n                            type=\"text\"\n                            placeholder={Locales.id}\n                            style={Style.text}\n                            onChange={handleIdChange}\n                            required\n                        />\n                    </div>\n                    <div className=\"row\" style={Style.padding}>\n                        <input\n                            type=\"text\"\n                            placeholder={Locales.name}\n                            style={Style.text}\n                            onChange={handleNameChange}\n                            required\n                        />\n                    </div>\n                    <button\n                        type=\"submit\"\n                        style={Style.button}\n                        onClick={handleLogin}\n                    >\n                        {Locales.login}\n                    </button>\n                </form>\n            </div>\n        </Card>\n    );\n}\n\nconst Style = {\n    heading: {\n        color: Colors.textColor,\n        fontSize: theme.FONT_SIZE_XXLARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    text: {\n        color: Colors.loginText,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n        borderRadius: '8px',\n        backgroundColor: Colors.backgroundColor,\n        padding: 10,\n        opacity: '1',\n        border: 0,\n        width: '100%',\n    },\n    padding: {\n        paddingLeft: 8,\n        paddingRight: 18,\n        paddingTop: 8,\n        paddingBottom: 8,\n    },\n    button: {\n        backgroundColor: Colors.buttonColor,\n        color: Colors.white,\n        borderRadius: '8px',\n        border: 0,\n        opacity: 1,\n        width: '100%',\n        padding: 8,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n};\n\nLogin.propTypes = {\n    handleLogin: PropTypes.func.isRequired,\n};\n\nexport default React.memo(Login);\n","const { FETCH_LOGIN, SET_LOGIN, LOGIN_FAIL } = require('../keys').default;\n\nexport function fetchLogin(data) {\n    return {\n        type: FETCH_LOGIN,\n        data\n    };\n}\n\nexport function setLogin(data) {\n    return {\n        type: SET_LOGIN,\n        data,\n    };\n}\n\nexport function loginFail(error) {\n    return {\n        type: LOGIN_FAIL,\n        error,\n    };\n}\n","import React, { useEffect, useCallback } from 'react';\nimport Login from './LoginView';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchLogin } from '../../redux/actions/login.action';\nimport { withRouter } from 'react-router-dom';\nfunction LoginContainer(props) {\n    // useEffect(() => {\n    //     props.actions.fetchLogin();\n    // }, [props.actions]);\n\n    const handleLogin = useCallback((id,name) => {\n        props.actions.fetchLogin(name);\n        props.history.push('/tasks');\n    }, [props.actions,props.history]);\n\n    return <Login handleLogin={handleLogin}></Login>;\n}\nfunction mapStateToProps(state) {\n    return {\n        data: state.login.data,\n        error: state.login.error,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(\n            {\n                fetchLogin,\n            },\n            dispatch,\n        ),\n    };\n}\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(LoginContainer));\n","import React from 'react';\nimport Login from '../src/screens/Login';\n\nfunction App() {\n    return <Login></Login>;\n}\n\nexport default App;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Colors from '../styles/colors';\nimport theme from '../styles/theme';\n\nfunction StickyHeader(props) {\n    return (\n        <div style={Style.sticky}>\n            <div style={Style.nameStyle}>\n                <img\n                    src={require('../assets/Supreetha.png')}\n                    alt=\"Avatar\"\n                    style={Style.avatar}\n                ></img>\n                <p style={Style.textStyle}>{props.headerTitle}</p>\n            </div>\n            <p style={Style.headerTitle}>Logout</p>\n        </div>\n\n    );\n}\n\nconst Style = {\n    sticky: {\n        position: 'fixed',\n        top: 0,\n        width: '100%',\n        display: 'block',\n        padding: 10,\n        backgroundColor: Colors.white,\n        boxShadow: '0px 3px 6px #00000029',\n        opacity: '1',\n    },\n    avatar: {\n        verticalAlign: 'middle',\n        width: '50px',\n        height: '50px',\n        borderRadius: '50%',\n        marginLeft: '20px',\n    },\n    nameStyle: {\n        float: 'left',\n        display: 'flex',\n    },\n    textStyle: {\n        marginLeft: 10,\n        color: Colors.textName,\n        fontSize: theme.FONT_SIZE_LARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    headerTitle: {\n        marginRight: 30,\n        float: 'right',\n        color: Colors.textName,\n        fontSize: theme.FONT_SIZE_LARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n};\n\nStickyHeader.propTypes = {\n    headerTitle: PropTypes.string.isRequired,\n};\n\nexport default React.memo(StickyHeader);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport theme from '../../../styles/theme';\nimport Colors from '../../../styles/colors';\n\nfunction TaskListTemp(props) {\n    const items = props.taskItems;\n    const listItems = items.map(item => (\n        <li\n            style={item.completed ? Style.strikeListText : Style.listText}\n            key={item._id}\n        >\n            {item.name}\n        </li>\n    ));\n    return <ul>{listItems}</ul>;\n}\n\nconst Style = {\n    listText: {\n        color: Colors.greyColor,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    strikeListText: {\n        color: Colors.greyColor,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n        textDecoration: 'line-through',\n    },\n};\nTaskListTemp.propTypes = {\n    taskItems: PropTypes.array.isRequired,\n};\nexport default React.memo(TaskListTemp);\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport './checkBoxList.css';\nfunction CheckBoxList(props) {\n    const toggleCheckboxChange = useCallback(() => {\n        props.toggleCheckboxChange(props.id);\n    }, [props]);\n    const handleEdit = useCallback(() => {\n        props.handleTaskEdit(props.id);\n    }, [props]);\n    const handleDelete = useCallback(() => {\n        props.handleTaskDelete(props.id);\n    }, [props]);\n\n    return (\n        <div className=\"padding\">\n            <label style={{ padding: 10 }} className=\"textLabel\">\n                <input\n                    className=\"checkbox\"\n                    type=\"checkbox\"\n                    value={props.id}\n                    checked={props.isChecked}\n                    onChange={toggleCheckboxChange}\n                />\n\n                {props.label}\n            </label>\n            <div style={{ float: 'right' }}>\n                <img\n                    src={require('../../../assets/pen-solid.svg')}\n                    alt=\"edit\"\n                    style={{ marginRight: 10 }}\n                    onClick={handleEdit}\n                />\n                <img\n                    src={require('../../../assets/trash-solid.svg')}\n                    alt=\"delete\"\n                    style={{ marginRight: 10 }}\n                    onClick={handleDelete}\n                />\n            </div>\n            <hr className=\"solid\"></hr>\n        </div>\n    );\n}\n\nCheckBoxList.propTypes = {\n    label: PropTypes.string.isRequired,\n    toggleCheckboxChange: PropTypes.func.isRequired,\n    handleTaskEdit: PropTypes.func.isRequired,\n    handleTaskDelete: PropTypes.func.isRequired,\n};\n\nexport default React.memo(CheckBoxList);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Sticky from '../../components/stickyHeader';\nimport Colors from '../../styles/colors';\nimport Locales from '../../config/locales.properties';\nimport theme from '../../styles/theme';\nimport List from './components/listComponent';\nimport './TaskList.css';\nimport CheckBox from './components/checkBoxList';\nfunction TaskList(props) {\n    return (\n        <div style={Style.mainContainer}>\n            <Sticky headerTitle={props.userName}></Sticky>\n            <div\n                style={{ marginTop: '80px' }}\n                className=\"container flex-direction\"\n            >\n                <div style={Style.container} className=\"div1\">\n                    <div>\n                        <p style={Style.innerContainer}>\n                            {Locales.tasksCompleted}\n                        </p>\n                        <p style={Style.valueStyle}>\n                            <span style={Style.numberStyle}>\n                                {props.data.tasksCompleted}\n                            </span>\n                            /{props.data.totalTasks}\n                        </p>\n                    </div>\n                </div>\n                <div style={Style.container} className=\"div2\">\n                    <div>\n                        <p style={Style.innerContainer}>\n                            {Locales.latestCreatedTask}\n                        </p>\n                        {props.data.latestTasks && (\n                            <List\n                                style={Style.listText}\n                                taskItems={props.data.latestTasks}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n            <div className=\"container flex-direction\">\n                <div style={Style.innerContainer} className=\"task\">\n                    {Locales.tasks}\n                </div>\n                <div className=\"div2\">\n                    <div className=\"searchDisplay\">\n                        <div className=\"searchDiv\" style={Style.searchBar}>\n                            <img\n                                src={require('../../assets/search-solid.svg')}\n                                alt=\"search\"\n                            />\n                            <input\n                                className=\"search\"\n                                type=\"search\"\n                                placeholder={Locales.search}\n                                style={Style.text}\n                                required\n                            />\n                        </div>\n                        <button type=\"submit\" style={Style.button}>\n                            +{Locales.newTask}\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"taskListCont\" style={Style.container}>\n                {props.data.latestTasks &&\n                    props.data.latestTasks.map(item => (\n                        <CheckBox\n                            key={item._id}\n                            label={item.name}\n                            id={item._id}\n                            toggleCheckboxChange={props.handleCheckboxChange}\n                            handleTaskDelete = {props.handleTaskDelete}\n                            handleTaskEdit={props.handleTaskEdit}\n                        ></CheckBox>\n                    ))}\n            </div>\n        </div>\n    );\n}\n\nconst Style = {\n    mainContainer: {\n        backgroundColor: Colors.backgroundPageColor,\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n    },\n\n    container: {\n        overflow: 'hidden',\n        backgroundColor: Colors.white,\n        borderRadius: '12px',\n        opacity: '1',\n        boxShadow: '0px 3px 6px #00000029',\n        // backgroundColor: Colors.white,\n        paddingTop: 8,\n        paddingBottom: '8px',\n        marginBottom: '10px',\n    },\n    innerContainer: {\n        marginLeft: '30px',\n        color: Colors.textColor,\n        textAlign: 'left',\n        fontSize: theme.FONT_SIZE_XXLARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    margin: {\n        marginLeft: '30px',\n    },\n    numberStyle: {\n        color: Colors.buttonColor,\n        fontSize: theme.FONT_SIZE_VLARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    valueStyle: {\n        marginLeft: '30px',\n        color: Colors.greyColor,\n        fontSize: theme.FONT_SIZE_XXLARGE,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    button: {\n        backgroundColor: Colors.buttonColor,\n        color: Colors.white,\n        borderRadius: '8px',\n        border: 0,\n        opacity: 1,\n        width: '100%',\n        padding: 8,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n    },\n    text: {\n        color: Colors.loginText,\n        fontSize: theme.FONT_SIZE_MEDIUM,\n        fontWeight: theme.FONT_WEIGHT_MEDIUM,\n        paddingLeft: 10,\n        border: 0,\n    },\n    searchBar: {\n        display: 'flex',\n        borderRadius: '8px',\n        backgroundColor: Colors.serachColor,\n        padding: 10,\n        opacity: '1',\n        border: 0,\n    },\n};\n\nTaskList.propTypes = {\n    userName: PropTypes.string.isRequired,\n    data: PropTypes.object,\n    handleCheckboxChange: PropTypes.func.isRequired,\n    handleTaskEdit: PropTypes.func.isRequired,\n    handleTaskDelete: PropTypes.func.isRequired,\n};\n\nexport default React.memo(TaskList);\n","const {\n    FETCH_DASHBOARD_DET,\n    SET_DASHBOARD_DET,\n    SET_DASHBOARD_ERROR,\n} = require('../keys').default;\n\nexport function fetchDashboardDetail() {\n    return {\n        type: FETCH_DASHBOARD_DET,\n    };\n}\n\nexport function setDashboardDetail(data) {\n           return {\n               type: SET_DASHBOARD_DET,\n               data,\n           };\n       }\n\nexport function setDashboardError(error) {\n    return {\n        type: SET_DASHBOARD_ERROR,\n        error,\n    };\n}\n","import React, { useEffect, useCallback } from 'react';\nimport TaskList from './TaskList';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchDashboardDetail } from '../../redux/actions/dashboard.actions';\nfunction TaskListContainer(props) {\n    useEffect(() => {\n        props.actions.fetchDashboardDetail();\n    }, [props.actions]);\n\n    const handleCheckBoxToggle = useCallback(value => {\n        console.log(value);\n    }, []);\n    const handleTaskDelete = useCallback(value => {\n        console.log(value);\n    }, []);\n    const handleTaskEdit = useCallback(value => {\n        console.log(value);\n    }, []);\n\n    return (\n        <TaskList\n            userName=\"Supreetha\"\n            data={props.data}\n            handleCheckboxChange={handleCheckBoxToggle}\n            handleTaskDelete={handleTaskDelete}\n            handleTaskEdit={handleTaskEdit}\n        />\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        data: state.dashboard.data,\n        error: state.dashboard.error,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(\n            {\n                fetchDashboardDetail,\n            },\n            dispatch,\n        ),\n    };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskListContainer);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const {\n    FETCH_DASHBOARD_DET,\n    SET_DASHBOARD_DET,\n    SET_DASHBOARD_ERROR,\n} = require('../keys').default;\n\nexport const initialState = {\n    data: {},\n    error: null,\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_DASHBOARD_DET:\n            return {\n                ...state,\n            };\n        case SET_DASHBOARD_DET:\n            return {\n                ...state,\n                data: action.data,\n            };\n        case SET_DASHBOARD_ERROR:\n            return {\n                ...state,\n                error: action.error,\n            };\n        default:\n            return state;\n    }\n};\n","const { FETCH_LOGIN, SET_LOGIN, LOGIN_FAIL } = require('../keys').default;\n\nexport const initialState = {\n    data: null,\n    error: null,\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_LOGIN:\n            return {\n                ...state,\n            };\n        case SET_LOGIN:\n            return {\n                ...state,\n                data: action.data,\n            };\n        case LOGIN_FAIL:\n            return {\n                ...state,\n                error: action.error,\n            };\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\nimport dashboard from './dashboard.reducer';\nimport login from './login.reducer';\n\n// const { SET_LOGGED_IN } = require('../keys').default;\n\nconst appReducer = combineReducers({\n    dashboard,login\n});\n\nexport default function root(state, action) {\n    // if (action.type === SET_LOGGED_IN) {\n    //     state = { login: state && state.login };\n    // }\n    return appReducer(state, action);\n}\n","/**\n\nthis file basically will be used to get the default base url and other things based on the build environment like production, staging etc.\n**/\n\nexport default {\n    hostURL: 'https://dev.teledirectasia.com:3092',\n};\n","import { AsyncStorage } from 'AsyncStorage';\n\nconst SESSION_KEY = 'KEY_SESSION_TOKENS';\n\nexport default class Session {\n    /**\n     * This will fetch session details from the Async storage.\n     */\n    static async getSessionDetails() {\n        try {\n            const data = await AsyncStorage.getItem(SESSION_KEY);\n            if (data !== null) {\n                return JSON.parse(data);\n            }\n        } catch (e) {}\n        return null;\n    }\n\n    /**\n     * This will save session daa into the async storage.\n     * @param {*} session\n     */\n    static async saveSessionDetails(session) {\n        try {\n            await AsyncStorage.setItem(SESSION_KEY, JSON.stringify(session));\n        } catch (e) {}\n    }\n\n    /**\n     * This will remove the session object from the persistent storage.\n     */\n    static async removeSession() {\n        try {\n            await AsyncStorage.removeItem(SESSION_KEY);\n        } catch (e) {}\n    }\n}\n","/**\n * This is a network library class, and will be used to perform all the network related operations.\n *\n */\nimport Axios from 'axios';\nimport { EnvConfig, Locales } from '../config';\nimport SessionService from '../services/persistService';\n\nexport const GET = 'GET';\nexport const POST = 'POST';\nexport const PUT = 'PUT';\nexport const DELETE = 'DELETE';\n\nexport default class Fetcher {\n    /**\n     * This method will hit the web server.\n     *\n     * @param {string} methodType - GET/POST values.\n     * @param {string} servicePath - servicePath to be hit.\n     * @param {Object} payload - will be empty in case of GET request.\n     *\n     */\n    static async call(methodType, servicePath, payload) {\n        const requestURL = EnvConfig.hostURL + servicePath;\n        const headers = this.getRequestHeaders();\n\n        try {\n            let axiosResponse = null;\n            try {\n                const session = await SessionService.getSessionDetails();\n                if (session !== null) {\n                    headers.Authorization = `${session.token.token}`;\n                }\n                const axios = Axios.create({\n                    baseURL: requestURL,\n                    headers,\n                    data: payload,\n                });\n                axiosResponse = await axios.request({\n                    method: methodType,\n                    data: payload,\n                });\n            } catch (error) {\n                axiosResponse = error.response;\n            }\n\n            // The API call has been executed successfully. This will return the actual JSON response.\n\n            if (axiosResponse.status === 200 || axiosResponse.status === 201) {\n                return axiosResponse.data;\n            }\n            if (axiosResponse.status === 400) {\n                throw new Error(Locales.genericErrorMessage);\n            }\n        } catch (error) {\n            // There is an error in fetching the data. This will return the error message to the function caller.\n\n            throw new Error(Locales.genericErrorMessage);\n        }\n    }\n\n    /**\n     function will create the required headers to be passed in  all the web services.\n     @returns {Object} JSON-object with all headers details.\n   */\n    static getRequestHeaders() {\n        const headers = {\n            Accept: 'application/json',\n        };\n        headers['Content-Type'] = 'application/json';\n        return headers;\n    }\n}\n","import Fetcher, { DELETE, GET, POST, PUT } from './fetcher';\nconst LOGIN_URL = '/login';\nconst DASH_URL = '/dashboard';\nconst TASK_URL = '/tasks';\nconst UPDATE_TASKS = '/tasks/{taskID}';\nclass TaskServices {\n    /** Service to Login and get Authorization Key */\n    static async Login() {\n        const URL = LOGIN_URL;\n        const payload = {\n            name: 'John Doe',\n            apiKey: '32bfee0c72840a0b',\n        };\n        return Fetcher.call(POST, `${URL}`, payload);\n    }\n    /** Service to get Dashboard data */\n    static async getDashboardData() {\n        const URL = DASH_URL;\n        return Fetcher.call(GET, `${URL}`);\n    }\n    /** Service to get list of tasks */\n    static async getTasks() {\n        const URL = TASK_URL;\n        return Fetcher.call(GET, `${URL}`);\n    }\n    /** Service to get update the task */\n    static async updateTasks(taskId) {\n        const URL = UPDATE_TASKS.replace('{taskId}', taskId);\n        const payload = {\n            name: 'Cleaning Dishes 123',\n            completed: true,\n        };\n        return Fetcher.call(PUT, `${URL}`, payload);\n    }\n    /** Service to get create the task */\n    static async createTasks() {\n        const URL = TASK_URL;\n        const payload = {\n            name: 'Cleaning Dishes 123',\n            completed: false,\n        };\n        return Fetcher.call(POST, `${URL}`, payload);\n    }\n}\n\nexport default TaskServices;\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport TaskService from '../../services/apiServices';\nimport SessionService from '../../services/persistService';\nimport {\n    setLogin,\n    loginFail,\n} from '../actions/login.action';\n\nconst { FETCH_LOGIN } = require('../keys').default;\n\nexport function* watchLogin() {\n    yield takeLatest(FETCH_LOGIN, fetchLogin);\n}\n\nexport function* fetchLogin(data) {\n    console.log(data.data)\n    try {\n        const data = yield call(TaskService.Login);\n        yield call(SessionService.saveSessionDetails, data);\n        yield put(setLogin(data));\n    } catch (error) {\n        yield put(loginFail(error.message));\n    }\n}\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport TaskService from '../../services/apiServices';\nimport {\n    setDashboardDetail,\n    setDashboardError,\n} from '../actions/dashboard.actions';\n\nconst { FETCH_DASHBOARD_DET } = require('../keys').default;\n\nexport function* watchTaskDetails() {\n    yield takeLatest(FETCH_DASHBOARD_DET, fetchDashboardData);\n}\n\nexport function* fetchDashboardData() {\n    try {\n        const data = yield call(\n            TaskService.getDashboardData,\n        );\n        yield put(setDashboardDetail(data));\n    } catch (error) {\n        yield put(setDashboardError(error.message));\n    }\n}\n","import { all, fork } from 'redux-saga/effects';\nimport { watchLogin } from './login.saga';\nimport { watchTaskDetails } from './dashboard.saga';\n\nexport default function* root() {\n    yield all([fork(watchLogin), fork(watchTaskDetails)]);\n}\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from '../reducer';\nimport rootSaga from '../saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    rootReducer,\n    compose(applyMiddleware(sagaMiddleware)),\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Route,BrowserRouter as Router } from 'react-router-dom';\nimport Task from '../src/screens/TaskList';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from '../src/redux/store';\n\nconst routing = (\n    <Provider store={store}>\n        <Router>\n            <div>\n                <Route exact path=\"/\" component={App} />\n                <Route path=\"/tasks\" component={Task} />\n            </div>\n        </Router>\n    </Provider>\n);\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}